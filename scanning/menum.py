import sys
import time
import os
import multiprocessing
from multiprocessing import Process, Queue
import subprocess
# run bash commands via python 

#start with basic nmap scan

class bcolors:
# deefine colors that will be used for stdout 

    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

# send the second command line argument to the variable ip_address
ip_address = sys.argv[1]
directory = sys.argv[2]

ip_address = ip_address.strip()

print ip_address

def usage():
	# If the user does not supply the nessecary arguments, print the usage instructions
	if len(sys.argv) != 3:
		print "[-]Usage: python %s <target_ip> <output_directory>" % sys.argv[0]
	        print "[-]Example: python %s 10.10.10.10 /root/HTB/" % sys.argv[0]
	   	sys.exit(1)


def basic_nmap(scans_directory):
	
	# Print info in green (OKGREEN) using bcolors (begin colors) then end the coloros (ENDC)
 	print bcolors.OKGREEN + "[+] Running basic nmap scan on/n " + ip_address + bcolors.ENDC

	# create variable to store the nma scan results 
	scan_results = "nmap -sV -O %s -oN %s/basic_nmap"  % (ip_address, scans_directory)

	# Print the syntax for the scan in purple 
	print bcolors.HEADER + "\n[+] " + scan_results + bcolors.ENDC

	# execute the TCPSCAN variable containiend the nmap scan 
	results = subprocess.check_output(scan_results, shell=True)
	# Print the results of the scan 
	print bcolors.OKGREEN + "\n[+]Finished with basic nmap scan for " + ip_address + ":" + bcolors.ENDC
	print results
	
	# define each line by the end of the line , split seperates each line by \n
	lines = results.split("\n")
	serv_dict = {}
	for line in lines:
        	# define array called ports
		ports = []
         	line = line.strip()
        	if ("tcp" in line) and ("open" in line) and not ("Discovered" in line):
        		# replace two spaces with one space
            		while "  " in line:
                		line = line.replace("  ", " ");
         		# seperate data in  the line by space and send it to an array
			linesplit= line.split(" ")
			# looks like this : ['22/tcp', 'open', 'ssh', 'OpenSSH', '7.4', '(protocol', '2.0)']
        		# grab the third element in the array (ssh)
			
			service = linesplit[2]
			if ("http" in service):
				gobuster()				
	
def full_tcp_nmap(scans_directory):
       
	 # Print info in green (OKGREEN) using bcolors (begin colors) then end the coloros (ENDC)
        print bcolors.OKGREEN + "[+] ---------------------Starting Full TCP Scan---------------------"
	#Running full nmap TCP scan on/n " + ip_address + bcolors.ENDC

        # create variable to store the nma scan results 
        TCPSCAN = "nmap -vv -Pn --disable-arp-ping -sS -A -sC -p- -T 3 -script-args=unsafe=1 -n %s -oN %s/full_nmap"  % (ip_address, scans_directory)

        # Print the syntax for the scan in purple 
        print bcolors.HEADER + TCPSCAN + bcolors.ENDC

        # execute the TCPSCAN variable containiend the nmap scan 
        results = subprocess.check_output(TCPSCAN, shell=True)

        # Print the results of the scan 
        print bcolors.OKGREEN + "INFO: RESULT BELOW - Finished with full TCP scan for " + ip_address + bcolors.ENDC
        print results

	#write to file?



# HTTP ENUM 

# GOBUSTER - need to test multiprocessor

def gobuster():
	goscan = "gobuster -w /usr/share/wordlists/dirb/common.txt -t 30 -k -x html,php -u http://%s -o gobuster.txt"  % (ip_address)
	print bcolors.OKGREEN + "INFO: Running gobuster for " + ip_address + bcolors.ENDC
	print bcolors.HEADER + goscan + bcolors.ENDC
	result = subprocess.check_output(goscan, shell=True)
	print bcolors.OKGREEN + "INFO: RESULT BELOW - Finished with gobuster for " + ip_address + bcolors.ENDC
	print result

# Dirb scan 

def dirb():
	dirbscan = "dirb http://%s/ -o dirb.txt"  % (ip_address)
	print bcolors.OKGREEN + "INFO: Running dirb for " + ip_address + bcolors.ENDC
	print bcolors.HEADER + dirbscan + bcolors.ENDC
	dirb = subprocess.check_output(dirbscan, shell=True)
	print bcolors.OKGREEN + "INFO: RESULT BELOW - Finished with dirb for " + ip_address + bcolors.ENDC
	print dirb

# DIRB large scan 


def main():

   try:
	scans = '%s%s' % (directory, ip_address) 

	# create directory nad file structure
 	# Frist check to see if a directory for the scans already exists:
	if not os.path.exists('directory''ip_address'): 
    		os.makedirs('directory''ip_address')
	#subprocess.check_output("mkdir" + " " + scans, shell=True)
	#subprocess.check_output("mkdir ../reports/" + scanip, shell=True)	
	basic_nmap(scans) 
	#full_tcp_nmap(scans)
   except:
	usage()
	#good exception 
if __name__=='__main__':
   main()
